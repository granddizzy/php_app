# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  #контейнер с Nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: myapp/nginx
    container_name: webserver
    # проброс портов
    ports:
      - "80:80"
    volumes:
       - ./code:/code/
       - ./phpsocket:/run
    networks:
      - app-network

  #Контейнер с PHP-FPM, назовём его app
  app:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: myapp/php # имя будущего образа
    container_name: app # имя контейнера после запуска
    volumes:
       - ./code:/code/
       - ./phpsocket:/run
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network
    depends_on:
      - database
      - memcache

  #  php-cli:
#    build:
#      context: ./php-cli
#      dockerfile: Dockerfile
#    image: myapp/php # можно использовать тот же образ, что и для PHP-FPM
#    container_name: php-cli
#    volumes:
#      - ./code:/code/
#    networks:
#      - app-network
#    tty: true

  memcache:
    image: memcached:latest
    container_name: memcached
    ports:
      - "11211:11211"
    command: memcached -m 64
    networks:
      - app-network

  database:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: database
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - ./db:/var/lib/mysql
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge